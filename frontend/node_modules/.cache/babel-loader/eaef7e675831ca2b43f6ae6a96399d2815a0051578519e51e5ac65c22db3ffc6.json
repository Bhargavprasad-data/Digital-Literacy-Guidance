{"ast":null,"code":"let cachedVoices = [];\nfunction refreshVoices() {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth) return [];\n    const voices = synth.getVoices();\n    if (voices && voices.length) cachedVoices = voices;\n    return cachedVoices;\n  } catch (_) {\n    return [];\n  }\n}\n\n// Public: return current voices (after hydration)\nexport function listVoices() {\n  const voices = refreshVoices();\n  // Some browsers populate voices asynchronously; attach a one-time listener\n  if (!voices.length && window.speechSynthesis) {\n    window.speechSynthesis.onvoiceschanged = () => {\n      cachedVoices = window.speechSynthesis.getVoices() || [];\n    };\n  }\n  return cachedVoices;\n}\n\n// Debug function to check available voices for Telugu\nexport function debugTeluguVoices() {\n  const voices = refreshVoices();\n  console.log('=== Telugu Voice Debug ===');\n  console.log('Total voices available:', voices.length);\n  const teluguVoices = voices.filter(v => v.lang && (v.lang.includes('te') || v.lang.includes('telugu') || v.name.toLowerCase().includes('telugu') || v.name.toLowerCase().includes('తెలుగు')));\n  console.log('Telugu-related voices found:', teluguVoices.length);\n  teluguVoices.forEach(v => {\n    console.log(`- ${v.name} (${v.lang})`);\n  });\n  const allVoices = voices.map(v => ({\n    name: v.name,\n    lang: v.lang\n  }));\n  console.log('All available voices:', allVoices);\n  return {\n    teluguVoices,\n    allVoices\n  };\n}\n\n// Test function for Telugu audio\nexport function testTeluguAudio() {\n  console.log('Testing Telugu audio...');\n  debugTeluguVoices();\n  const testText = 'భాష సేవ్ చేయబడింది'; // \"Language saved\" in Telugu\n  console.log('Speaking test text:', testText);\n  speak(testText, 'te-IN');\n\n  // Also test with just 'te'\n  setTimeout(() => {\n    console.log('Testing with just \"te\" language code...');\n    speak(testText, 'te');\n  }, 3000);\n}\n\n// Map simple language code to BCP-47 variants commonly available\nfunction resolveLangCode(lang) {\n  switch (lang) {\n    case 'hi':\n    case 'hi-IN':\n      return 'hi-IN';\n    case 'te':\n    case 'te-IN':\n      return 'te-IN';\n    case 'ta':\n    case 'ta-IN':\n      return 'ta-IN';\n    case 'kn':\n    case 'kn-IN':\n      return 'kn-IN';\n    case 'mr':\n    case 'mr-IN':\n      return 'mr-IN';\n    case 'bn':\n    case 'bn-IN':\n      return 'bn-IN';\n    default:\n      return 'en-IN';\n  }\n}\nfunction findBestVoice(lang) {\n  const code = resolveLangCode(lang);\n  const voices = refreshVoices();\n  console.log(`Looking for voice for language: ${lang} (resolved to: ${code})`);\n  console.log(`Available voices:`, voices.map(v => ({\n    name: v.name,\n    lang: v.lang\n  })));\n\n  // Exact lang match\n  let v = voices.find(x => x.lang === code);\n  if (v) {\n    console.log(`Found exact match: ${v.name} (${v.lang})`);\n    return v;\n  }\n\n  // Starts with match e.g. hi vs hi-IN\n  v = voices.find(x => x.lang && x.lang.toLowerCase().startsWith(code.slice(0, 2)));\n  if (v) {\n    console.log(`Found prefix match: ${v.name} (${v.lang})`);\n    return v;\n  }\n\n  // Keyword-based match by voice name for local scripts\n  const keywords = {\n    'hi-IN': ['Hindi', 'हिन्दी', 'हिंदी'],\n    'te-IN': ['Telugu', 'తెలుగు', 'te', 'telugu'],\n    'ta-IN': ['Tamil', 'தமிழ்'],\n    'kn-IN': ['Kannada', 'ಕನ್ನಡ'],\n    'mr-IN': ['Marathi', 'मराठी'],\n    'bn-IN': ['Bengali', 'Bangla', 'বাংলা']\n  };\n  const ks = keywords[code] || [];\n  v = voices.find(x => ks.some(k => (x.name || '').toLowerCase().includes(k.toLowerCase())));\n  if (v) {\n    console.log(`Found keyword match: ${v.name} (${v.lang})`);\n    return v;\n  }\n\n  // Special handling for Telugu - try more variations\n  if (code === 'te-IN') {\n    // Try to find any voice that might work for Telugu\n    v = voices.find(x => x.lang && (x.lang.includes('te') || x.lang.includes('telugu') || x.name.toLowerCase().includes('telugu') || x.name.toLowerCase().includes('తెలుగు')));\n    if (v) {\n      console.log(`Found Telugu-specific match: ${v.name} (${v.lang})`);\n      return v;\n    }\n\n    // For Telugu, try to find any Indian voice that might work\n    v = voices.find(x => x.lang && (x.lang.includes('IN') || x.lang.includes('India') || x.name.toLowerCase().includes('india') || x.name.toLowerCase().includes('indian')));\n    if (v) {\n      console.log(`Found Indian voice for Telugu: ${v.name} (${v.lang})`);\n      return v;\n    }\n\n    // Last resort for Telugu - try any voice that's not English\n    v = voices.find(x => x.lang && !x.lang.toLowerCase().startsWith('en'));\n    if (v) {\n      console.log(`Using non-English voice for Telugu: ${v.name} (${v.lang})`);\n      return v;\n    }\n    console.log('No Telugu-compatible voice found');\n    return null;\n  }\n\n  // Fallback Indian English for other languages\n  v = voices.find(x => x.lang === 'en-IN');\n  if (v) {\n    console.log(`Using Indian English fallback: ${v.name} (${v.lang})`);\n    return v;\n  }\n\n  // Any English fallback for other languages\n  v = voices.find(x => (x.lang || '').startsWith('en'));\n  if (v) {\n    console.log(`Using English fallback: ${v.name} (${v.lang})`);\n    return v;\n  }\n  console.log('No suitable voice found, using default');\n  return null;\n}\nexport function speak(text, lang = 'en-IN') {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth || !text) {\n      console.log('Speech synthesis not available or no text provided');\n      return;\n    }\n    console.log(`Attempting to speak: \"${text}\" in language: ${lang}`);\n\n    // Cancel any ongoing speech\n    synth.cancel();\n    const attempt = () => {\n      const utter = new SpeechSynthesisUtterance(text);\n      const resolvedLang = resolveLangCode(lang);\n      utter.lang = resolvedLang;\n      const voice = findBestVoice(lang);\n      if (voice) {\n        utter.voice = voice;\n        console.log(`Speaking in ${lang} using voice: ${voice.name} (${voice.lang})`);\n      } else {\n        console.log(`No specific voice found for ${lang}, using default`);\n        // For Telugu, try multiple language code variations\n        if (lang === 'te' || lang === 'te-IN') {\n          console.log('Attempting Telugu language code variations...');\n          // Try different Telugu language codes\n          const teluguCodes = ['te-IN', 'te', 'telugu', 'te-IN-x-telugu'];\n          const foundVoice = teluguCodes.find(code => {\n            const testVoice = voices.find(v => v.lang === code);\n            if (testVoice) {\n              utter.lang = code;\n              utter.voice = testVoice;\n              console.log(`Using Telugu voice with code ${code}: ${testVoice.name}`);\n              return true;\n            }\n            return false;\n          });\n          if (!foundVoice) {\n            console.log('No Telugu voice found with any language code');\n          }\n        }\n      }\n      utter.rate = 0.8; // slower for clarity\n      utter.pitch = 1;\n      utter.volume = 1;\n\n      // Add event listeners for debugging\n      utter.onstart = () => console.log('Speech started successfully');\n      utter.onend = () => console.log('Speech ended');\n      utter.onerror = e => {\n        console.log('Speech error:', e);\n        // Don't automatically fallback to English for Telugu - let the user know\n        if (lang === 'te' || lang === 'te-IN') {\n          console.log('Telugu speech failed:', e.error);\n          console.log('Available voices:', refreshVoices().map(v => ({\n            name: v.name,\n            lang: v.lang\n          })));\n        }\n      };\n      synth.speak(utter);\n    };\n    const voices = refreshVoices();\n    console.log(`Available voices: ${voices.length}`);\n    if (!voices.length && typeof synth.onvoiceschanged !== 'undefined') {\n      console.log('Waiting for voices to load...');\n      // Wait for voices to load\n      const once = () => {\n        synth.onvoiceschanged = null;\n        console.log('Voices loaded, attempting speech...');\n        setTimeout(attempt, 200);\n      };\n      synth.onvoiceschanged = once;\n      // Fallback timer\n      setTimeout(() => {\n        console.log('Fallback timer triggered, attempting speech...');\n        attempt();\n      }, 1500);\n    } else {\n      // Small delay to ensure voices are ready\n      setTimeout(attempt, 200);\n    }\n  } catch (e) {\n    console.error('Speech synthesis error:', e);\n  }\n}\nexport function listen(onResult, onError) {\n  try {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      onError && onError(new Error('Speech recognition not supported'));\n      return () => {};\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-IN';\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.onresult = e => {\n      const transcript = e.results[0][0].transcript;\n      onResult && onResult(transcript);\n    };\n    recognition.onerror = e => onError && onError(e);\n    recognition.start();\n    return () => recognition.stop();\n  } catch (e) {\n    onError && onError(e);\n    return () => {};\n  }\n}","map":{"version":3,"names":["cachedVoices","refreshVoices","synth","window","speechSynthesis","voices","getVoices","length","_","listVoices","onvoiceschanged","debugTeluguVoices","console","log","teluguVoices","filter","v","lang","includes","name","toLowerCase","forEach","allVoices","map","testTeluguAudio","testText","speak","setTimeout","resolveLangCode","findBestVoice","code","find","x","startsWith","slice","keywords","ks","some","k","text","cancel","attempt","utter","SpeechSynthesisUtterance","resolvedLang","voice","teluguCodes","foundVoice","testVoice","rate","pitch","volume","onstart","onend","onerror","e","error","once","listen","onResult","onError","SpeechRecognition","webkitSpeechRecognition","Error","recognition","continuous","interimResults","onresult","transcript","results","start","stop"],"sources":["C:/Users/Bharg/OneDrive/Desktop/Digital literacy/frontend/src/services/voice.js"],"sourcesContent":["let cachedVoices = [];\n\nfunction refreshVoices() {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth) return [];\n    const voices = synth.getVoices();\n    if (voices && voices.length) cachedVoices = voices;\n    return cachedVoices;\n  } catch (_) {\n    return [];\n  }\n}\n\n// Public: return current voices (after hydration)\nexport function listVoices() {\n  const voices = refreshVoices();\n  // Some browsers populate voices asynchronously; attach a one-time listener\n  if (!voices.length && window.speechSynthesis) {\n    window.speechSynthesis.onvoiceschanged = () => {\n      cachedVoices = window.speechSynthesis.getVoices() || [];\n    };\n  }\n  return cachedVoices;\n}\n\n// Debug function to check available voices for Telugu\nexport function debugTeluguVoices() {\n  const voices = refreshVoices();\n  console.log('=== Telugu Voice Debug ===');\n  console.log('Total voices available:', voices.length);\n  \n  const teluguVoices = voices.filter(v => \n    v.lang && (\n      v.lang.includes('te') || \n      v.lang.includes('telugu') ||\n      v.name.toLowerCase().includes('telugu') ||\n      v.name.toLowerCase().includes('తెలుగు')\n    )\n  );\n  \n  console.log('Telugu-related voices found:', teluguVoices.length);\n  teluguVoices.forEach(v => {\n    console.log(`- ${v.name} (${v.lang})`);\n  });\n  \n  const allVoices = voices.map(v => ({ name: v.name, lang: v.lang }));\n  console.log('All available voices:', allVoices);\n  \n  return { teluguVoices, allVoices };\n}\n\n// Test function for Telugu audio\nexport function testTeluguAudio() {\n  console.log('Testing Telugu audio...');\n  debugTeluguVoices();\n  \n  const testText = 'భాష సేవ్ చేయబడింది'; // \"Language saved\" in Telugu\n  console.log('Speaking test text:', testText);\n  \n  speak(testText, 'te-IN');\n  \n  // Also test with just 'te'\n  setTimeout(() => {\n    console.log('Testing with just \"te\" language code...');\n    speak(testText, 'te');\n  }, 3000);\n}\n\n// Map simple language code to BCP-47 variants commonly available\nfunction resolveLangCode(lang) {\n  switch (lang) {\n    case 'hi':\n    case 'hi-IN':\n      return 'hi-IN';\n    case 'te':\n    case 'te-IN':\n      return 'te-IN';\n    case 'ta':\n    case 'ta-IN':\n      return 'ta-IN';\n    case 'kn':\n    case 'kn-IN':\n      return 'kn-IN';\n    case 'mr':\n    case 'mr-IN':\n      return 'mr-IN';\n    case 'bn':\n    case 'bn-IN':\n      return 'bn-IN';\n    default:\n      return 'en-IN';\n  }\n}\n\nfunction findBestVoice(lang) {\n  const code = resolveLangCode(lang);\n  const voices = refreshVoices();\n  \n  console.log(`Looking for voice for language: ${lang} (resolved to: ${code})`);\n  console.log(`Available voices:`, voices.map(v => ({ name: v.name, lang: v.lang })));\n  \n  // Exact lang match\n  let v = voices.find(x => x.lang === code);\n  if (v) {\n    console.log(`Found exact match: ${v.name} (${v.lang})`);\n    return v;\n  }\n  \n  // Starts with match e.g. hi vs hi-IN\n  v = voices.find(x => x.lang && x.lang.toLowerCase().startsWith(code.slice(0,2)));\n  if (v) {\n    console.log(`Found prefix match: ${v.name} (${v.lang})`);\n    return v;\n  }\n  \n  // Keyword-based match by voice name for local scripts\n  const keywords = {\n    'hi-IN': ['Hindi','हिन्दी','हिंदी'],\n    'te-IN': ['Telugu','తెలుగు','te','telugu'],\n    'ta-IN': ['Tamil','தமிழ்'],\n    'kn-IN': ['Kannada','ಕನ್ನಡ'],\n    'mr-IN': ['Marathi','मराठी'],\n    'bn-IN': ['Bengali','Bangla','বাংলা'],\n  };\n  const ks = keywords[code] || [];\n  v = voices.find(x => ks.some(k => (x.name || '').toLowerCase().includes(k.toLowerCase())));\n  if (v) {\n    console.log(`Found keyword match: ${v.name} (${v.lang})`);\n    return v;\n  }\n  \n  // Special handling for Telugu - try more variations\n  if (code === 'te-IN') {\n    // Try to find any voice that might work for Telugu\n    v = voices.find(x => \n      x.lang && (\n        x.lang.includes('te') || \n        x.lang.includes('telugu') ||\n        x.name.toLowerCase().includes('telugu') ||\n        x.name.toLowerCase().includes('తెలుగు')\n      )\n    );\n    if (v) {\n      console.log(`Found Telugu-specific match: ${v.name} (${v.lang})`);\n      return v;\n    }\n    \n    // For Telugu, try to find any Indian voice that might work\n    v = voices.find(x => \n      x.lang && (\n        x.lang.includes('IN') || \n        x.lang.includes('India') ||\n        x.name.toLowerCase().includes('india') ||\n        x.name.toLowerCase().includes('indian')\n      )\n    );\n    if (v) {\n      console.log(`Found Indian voice for Telugu: ${v.name} (${v.lang})`);\n      return v;\n    }\n    \n    // Last resort for Telugu - try any voice that's not English\n    v = voices.find(x => \n      x.lang && !x.lang.toLowerCase().startsWith('en')\n    );\n    if (v) {\n      console.log(`Using non-English voice for Telugu: ${v.name} (${v.lang})`);\n      return v;\n    }\n    \n    console.log('No Telugu-compatible voice found');\n    return null;\n  }\n  \n  // Fallback Indian English for other languages\n  v = voices.find(x => x.lang === 'en-IN');\n  if (v) {\n    console.log(`Using Indian English fallback: ${v.name} (${v.lang})`);\n    return v;\n  }\n  \n  // Any English fallback for other languages\n  v = voices.find(x => (x.lang || '').startsWith('en'));\n  if (v) {\n    console.log(`Using English fallback: ${v.name} (${v.lang})`);\n    return v;\n  }\n  \n  console.log('No suitable voice found, using default');\n  return null;\n}\n\nexport function speak(text, lang = 'en-IN') {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth || !text) {\n      console.log('Speech synthesis not available or no text provided');\n      return;\n    }\n    \n    console.log(`Attempting to speak: \"${text}\" in language: ${lang}`);\n    \n    // Cancel any ongoing speech\n    synth.cancel();\n    \n    const attempt = () => {\n      const utter = new SpeechSynthesisUtterance(text);\n      const resolvedLang = resolveLangCode(lang);\n      utter.lang = resolvedLang;\n      \n      const voice = findBestVoice(lang);\n      if (voice) {\n        utter.voice = voice;\n        console.log(`Speaking in ${lang} using voice: ${voice.name} (${voice.lang})`);\n      } else {\n        console.log(`No specific voice found for ${lang}, using default`);\n        // For Telugu, try multiple language code variations\n        if (lang === 'te' || lang === 'te-IN') {\n          console.log('Attempting Telugu language code variations...');\n          // Try different Telugu language codes\n          const teluguCodes = ['te-IN', 'te', 'telugu', 'te-IN-x-telugu'];\n          const foundVoice = teluguCodes.find(code => {\n            const testVoice = voices.find(v => v.lang === code);\n            if (testVoice) {\n              utter.lang = code;\n              utter.voice = testVoice;\n              console.log(`Using Telugu voice with code ${code}: ${testVoice.name}`);\n              return true;\n            }\n            return false;\n          });\n          \n          if (!foundVoice) {\n            console.log('No Telugu voice found with any language code');\n          }\n        }\n      }\n      \n      utter.rate = 0.8; // slower for clarity\n      utter.pitch = 1;\n      utter.volume = 1;\n      \n      // Add event listeners for debugging\n      utter.onstart = () => console.log('Speech started successfully');\n      utter.onend = () => console.log('Speech ended');\n      utter.onerror = (e) => {\n        console.log('Speech error:', e);\n        // Don't automatically fallback to English for Telugu - let the user know\n        if ((lang === 'te' || lang === 'te-IN')) {\n          console.log('Telugu speech failed:', e.error);\n          console.log('Available voices:', refreshVoices().map(v => ({ name: v.name, lang: v.lang })));\n        }\n      };\n      \n      synth.speak(utter);\n    };\n    \n    const voices = refreshVoices();\n    console.log(`Available voices: ${voices.length}`);\n    \n    if (!voices.length && typeof synth.onvoiceschanged !== 'undefined') {\n      console.log('Waiting for voices to load...');\n      // Wait for voices to load\n      const once = () => {\n        synth.onvoiceschanged = null;\n        console.log('Voices loaded, attempting speech...');\n        setTimeout(attempt, 200);\n      };\n      synth.onvoiceschanged = once;\n      // Fallback timer\n      setTimeout(() => {\n        console.log('Fallback timer triggered, attempting speech...');\n        attempt();\n      }, 1500);\n    } else {\n      // Small delay to ensure voices are ready\n      setTimeout(attempt, 200);\n    }\n  } catch (e) {\n    console.error('Speech synthesis error:', e);\n  }\n}\n\nexport function listen(onResult, onError) {\n  try {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      onError && onError(new Error('Speech recognition not supported'));\n      return () => {};\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-IN';\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.onresult = (e) => {\n      const transcript = e.results[0][0].transcript;\n      onResult && onResult(transcript);\n    };\n    recognition.onerror = (e) => onError && onError(e);\n    recognition.start();\n    return () => recognition.stop();\n  } catch (e) {\n    onError && onError(e);\n    return () => {};\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}