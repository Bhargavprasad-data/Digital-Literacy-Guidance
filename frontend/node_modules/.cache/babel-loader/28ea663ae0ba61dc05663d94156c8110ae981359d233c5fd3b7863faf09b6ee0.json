{"ast":null,"code":"let cachedVoices = [];\nfunction refreshVoices() {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth) return [];\n    const voices = synth.getVoices();\n    if (voices && voices.length) cachedVoices = voices;\n    return cachedVoices;\n  } catch (_) {\n    return [];\n  }\n}\n\n// Public: return current voices (after hydration)\nexport function listVoices() {\n  const voices = refreshVoices();\n  // Some browsers populate voices asynchronously; attach a one-time listener\n  if (!voices.length && window.speechSynthesis) {\n    window.speechSynthesis.onvoiceschanged = () => {\n      cachedVoices = window.speechSynthesis.getVoices() || [];\n    };\n  }\n  return cachedVoices;\n}\n\n// Map simple language code to BCP-47 variants commonly available\nfunction resolveLangCode(lang) {\n  switch (lang) {\n    case 'hi':\n    case 'hi-IN':\n      return 'hi-IN';\n    case 'te':\n    case 'te-IN':\n      return 'te-IN';\n    case 'ta':\n    case 'ta-IN':\n      return 'ta-IN';\n    case 'kn':\n    case 'kn-IN':\n      return 'kn-IN';\n    case 'mr':\n    case 'mr-IN':\n      return 'mr-IN';\n    case 'bn':\n    case 'bn-IN':\n      return 'bn-IN';\n    default:\n      return 'en-IN';\n  }\n}\nfunction findBestVoice(lang) {\n  const code = resolveLangCode(lang);\n  const voices = refreshVoices();\n  // Exact lang match\n  let v = voices.find(x => x.lang === code);\n  if (v) return v;\n  // Starts with match e.g. hi vs hi-IN\n  v = voices.find(x => x.lang && x.lang.toLowerCase().startsWith(code.slice(0, 2)));\n  if (v) return v;\n  // Keyword-based match by voice name for local scripts\n  const keywords = {\n    'hi-IN': ['Hindi', 'हिन्दी', 'हिंदी'],\n    'te-IN': ['Telugu', 'తెలుగు'],\n    'ta-IN': ['Tamil', 'தமிழ்'],\n    'kn-IN': ['Kannada', 'ಕನ್ನಡ'],\n    'mr-IN': ['Marathi', 'मराठी'],\n    'bn-IN': ['Bengali', 'Bangla', 'বাংলা']\n  };\n  const ks = keywords[code] || [];\n  v = voices.find(x => ks.some(k => (x.name || '').toLowerCase().includes(k.toLowerCase())));\n  if (v) return v;\n  // Fallback Indian English\n  v = voices.find(x => x.lang === 'en-IN');\n  if (v) return v;\n  // Any English fallback\n  return voices.find(x => (x.lang || '').startsWith('en')) || null;\n}\nexport function speak(text, lang = 'en-IN') {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth || !text) {\n      console.log('Speech synthesis not available or no text provided');\n      return;\n    }\n    console.log(`Attempting to speak: \"${text}\" in language: ${lang}`);\n\n    // Cancel any ongoing speech\n    synth.cancel();\n    const attempt = () => {\n      const utter = new SpeechSynthesisUtterance(text);\n      const resolvedLang = resolveLangCode(lang);\n      utter.lang = resolvedLang;\n      const voice = findBestVoice(lang);\n      if (voice) {\n        utter.voice = voice;\n        console.log(`Speaking in ${lang} using voice: ${voice.name} (${voice.lang})`);\n      } else {\n        console.log(`No specific voice found for ${lang}, using default`);\n      }\n      utter.rate = 0.8; // slower for clarity\n      utter.pitch = 1;\n      utter.volume = 1;\n\n      // Add event listeners for debugging\n      utter.onstart = () => console.log('Speech started successfully');\n      utter.onend = () => console.log('Speech ended');\n      utter.onerror = e => console.log('Speech error:', e);\n      synth.speak(utter);\n    };\n    const voices = refreshVoices();\n    console.log(`Available voices: ${voices.length}`);\n    if (!voices.length && typeof synth.onvoiceschanged !== 'undefined') {\n      console.log('Waiting for voices to load...');\n      // Wait for voices to load\n      const once = () => {\n        synth.onvoiceschanged = null;\n        console.log('Voices loaded, attempting speech...');\n        setTimeout(attempt, 200);\n      };\n      synth.onvoiceschanged = once;\n      // Fallback timer\n      setTimeout(() => {\n        console.log('Fallback timer triggered, attempting speech...');\n        attempt();\n      }, 1500);\n    } else {\n      // Small delay to ensure voices are ready\n      setTimeout(attempt, 200);\n    }\n  } catch (e) {\n    console.error('Speech synthesis error:', e);\n  }\n}\nexport function listen(onResult, onError) {\n  try {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      onError && onError(new Error('Speech recognition not supported'));\n      return () => {};\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-IN';\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.onresult = e => {\n      const transcript = e.results[0][0].transcript;\n      onResult && onResult(transcript);\n    };\n    recognition.onerror = e => onError && onError(e);\n    recognition.start();\n    return () => recognition.stop();\n  } catch (e) {\n    onError && onError(e);\n    return () => {};\n  }\n}","map":{"version":3,"names":["cachedVoices","refreshVoices","synth","window","speechSynthesis","voices","getVoices","length","_","listVoices","onvoiceschanged","resolveLangCode","lang","findBestVoice","code","v","find","x","toLowerCase","startsWith","slice","keywords","ks","some","k","name","includes","speak","text","console","log","cancel","attempt","utter","SpeechSynthesisUtterance","resolvedLang","voice","rate","pitch","volume","onstart","onend","onerror","e","once","setTimeout","error","listen","onResult","onError","SpeechRecognition","webkitSpeechRecognition","Error","recognition","continuous","interimResults","onresult","transcript","results","start","stop"],"sources":["C:/Users/Bharg/OneDrive/Desktop/Digital literacy/frontend/src/services/voice.js"],"sourcesContent":["let cachedVoices = [];\n\nfunction refreshVoices() {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth) return [];\n    const voices = synth.getVoices();\n    if (voices && voices.length) cachedVoices = voices;\n    return cachedVoices;\n  } catch (_) {\n    return [];\n  }\n}\n\n// Public: return current voices (after hydration)\nexport function listVoices() {\n  const voices = refreshVoices();\n  // Some browsers populate voices asynchronously; attach a one-time listener\n  if (!voices.length && window.speechSynthesis) {\n    window.speechSynthesis.onvoiceschanged = () => {\n      cachedVoices = window.speechSynthesis.getVoices() || [];\n    };\n  }\n  return cachedVoices;\n}\n\n// Map simple language code to BCP-47 variants commonly available\nfunction resolveLangCode(lang) {\n  switch (lang) {\n    case 'hi':\n    case 'hi-IN':\n      return 'hi-IN';\n    case 'te':\n    case 'te-IN':\n      return 'te-IN';\n    case 'ta':\n    case 'ta-IN':\n      return 'ta-IN';\n    case 'kn':\n    case 'kn-IN':\n      return 'kn-IN';\n    case 'mr':\n    case 'mr-IN':\n      return 'mr-IN';\n    case 'bn':\n    case 'bn-IN':\n      return 'bn-IN';\n    default:\n      return 'en-IN';\n  }\n}\n\nfunction findBestVoice(lang) {\n  const code = resolveLangCode(lang);\n  const voices = refreshVoices();\n  // Exact lang match\n  let v = voices.find(x => x.lang === code);\n  if (v) return v;\n  // Starts with match e.g. hi vs hi-IN\n  v = voices.find(x => x.lang && x.lang.toLowerCase().startsWith(code.slice(0,2)));\n  if (v) return v;\n  // Keyword-based match by voice name for local scripts\n  const keywords = {\n    'hi-IN': ['Hindi','हिन्दी','हिंदी'],\n    'te-IN': ['Telugu','తెలుగు'],\n    'ta-IN': ['Tamil','தமிழ்'],\n    'kn-IN': ['Kannada','ಕನ್ನಡ'],\n    'mr-IN': ['Marathi','मराठी'],\n    'bn-IN': ['Bengali','Bangla','বাংলা'],\n  };\n  const ks = keywords[code] || [];\n  v = voices.find(x => ks.some(k => (x.name || '').toLowerCase().includes(k.toLowerCase())));\n  if (v) return v;\n  // Fallback Indian English\n  v = voices.find(x => x.lang === 'en-IN');\n  if (v) return v;\n  // Any English fallback\n  return voices.find(x => (x.lang || '').startsWith('en')) || null;\n}\n\nexport function speak(text, lang = 'en-IN') {\n  try {\n    const synth = window.speechSynthesis;\n    if (!synth || !text) {\n      console.log('Speech synthesis not available or no text provided');\n      return;\n    }\n    \n    console.log(`Attempting to speak: \"${text}\" in language: ${lang}`);\n    \n    // Cancel any ongoing speech\n    synth.cancel();\n    \n    const attempt = () => {\n      const utter = new SpeechSynthesisUtterance(text);\n      const resolvedLang = resolveLangCode(lang);\n      utter.lang = resolvedLang;\n      \n      const voice = findBestVoice(lang);\n      if (voice) {\n        utter.voice = voice;\n        console.log(`Speaking in ${lang} using voice: ${voice.name} (${voice.lang})`);\n      } else {\n        console.log(`No specific voice found for ${lang}, using default`);\n      }\n      \n      utter.rate = 0.8; // slower for clarity\n      utter.pitch = 1;\n      utter.volume = 1;\n      \n      // Add event listeners for debugging\n      utter.onstart = () => console.log('Speech started successfully');\n      utter.onend = () => console.log('Speech ended');\n      utter.onerror = (e) => console.log('Speech error:', e);\n      \n      synth.speak(utter);\n    };\n    \n    const voices = refreshVoices();\n    console.log(`Available voices: ${voices.length}`);\n    \n    if (!voices.length && typeof synth.onvoiceschanged !== 'undefined') {\n      console.log('Waiting for voices to load...');\n      // Wait for voices to load\n      const once = () => {\n        synth.onvoiceschanged = null;\n        console.log('Voices loaded, attempting speech...');\n        setTimeout(attempt, 200);\n      };\n      synth.onvoiceschanged = once;\n      // Fallback timer\n      setTimeout(() => {\n        console.log('Fallback timer triggered, attempting speech...');\n        attempt();\n      }, 1500);\n    } else {\n      // Small delay to ensure voices are ready\n      setTimeout(attempt, 200);\n    }\n  } catch (e) {\n    console.error('Speech synthesis error:', e);\n  }\n}\n\nexport function listen(onResult, onError) {\n  try {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      onError && onError(new Error('Speech recognition not supported'));\n      return () => {};\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-IN';\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.onresult = (e) => {\n      const transcript = e.results[0][0].transcript;\n      onResult && onResult(transcript);\n    };\n    recognition.onerror = (e) => onError && onError(e);\n    recognition.start();\n    return () => recognition.stop();\n  } catch (e) {\n    onError && onError(e);\n    return () => {};\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}