{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({\n        error: 'Network error'\n      }));\n      throw new Error(error.error || 'Request failed');\n    }\n    return response.json();\n  },\n  // Auth endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: userData\n    });\n  },\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: credentials\n    });\n  },\n  async getMe(token) {\n    return this.request('/auth/me', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // App endpoints\n  async getPrefs(token) {\n    return this.request('/prefs', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  async updatePrefs(token, prefs) {\n    return this.request('/prefs', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: prefs\n    });\n  },\n  async savePracticeLog(token, logData) {\n    return this.request('/practice', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: logData\n    });\n  },\n  async getPracticeLogs(token) {\n    return this.request('/practice', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","api","request","endpoint","options","url","config","headers","body","JSON","stringify","response","fetch","ok","error","json","catch","Error","register","userData","method","login","credentials","getMe","token","Authorization","getPrefs","updatePrefs","prefs","savePracticeLog","logData","getPracticeLogs"],"sources":["C:/Users/Bharg/OneDrive/Desktop/Digital literacy/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n\n    const response = await fetch(url, config);\n    \n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ error: 'Network error' }));\n      throw new Error(error.error || 'Request failed');\n    }\n\n    return response.json();\n  },\n\n  // Auth endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: userData,\n    });\n  },\n\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: credentials,\n    });\n  },\n\n  async getMe(token) {\n    return this.request('/auth/me', {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  },\n\n  // App endpoints\n  async getPrefs(token) {\n    return this.request('/prefs', {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  },\n\n  async updatePrefs(token, prefs) {\n    return this.request('/prefs', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${token}` },\n      body: prefs,\n    });\n  },\n\n  async savePracticeLog(token, logData) {\n    return this.request('/practice', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${token}` },\n      body: logData,\n    });\n  },\n\n  async getPracticeLogs(token) {\n    return this.request('/practice', {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  },\n};\n\nexport default api;"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE7E,MAAMC,GAAG,GAAG;EACV,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAGR,QAAQ,GAAGM,QAAQ,EAAE;IACpC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAIE,MAAM,CAACE,IAAI,IAAI,OAAOF,MAAM,CAACE,IAAI,KAAK,QAAQ,EAAE;MAClDF,MAAM,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAACE,IAAI,CAAC;IAC3C;IAEA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEC,MAAM,CAAC;IAEzC,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;QAAEF,KAAK,EAAE;MAAgB,CAAC,CAAC,CAAC;MAC7E,MAAM,IAAIG,KAAK,CAACH,KAAK,CAACA,KAAK,IAAI,gBAAgB,CAAC;IAClD;IAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACA,MAAMG,QAAQA,CAACC,QAAQ,EAAE;IACvB,OAAO,IAAI,CAACjB,OAAO,CAAC,gBAAgB,EAAE;MACpCkB,MAAM,EAAE,MAAM;MACdZ,IAAI,EAAEW;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,KAAKA,CAACC,WAAW,EAAE;IACvB,OAAO,IAAI,CAACpB,OAAO,CAAC,aAAa,EAAE;MACjCkB,MAAM,EAAE,MAAM;MACdZ,IAAI,EAAEc;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,KAAKA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACtB,OAAO,CAAC,UAAU,EAAE;MAC9BK,OAAO,EAAE;QAAEkB,aAAa,EAAE,UAAUD,KAAK;MAAG;IAC9C,CAAC,CAAC;EACJ,CAAC;EAED;EACA,MAAME,QAAQA,CAACF,KAAK,EAAE;IACpB,OAAO,IAAI,CAACtB,OAAO,CAAC,QAAQ,EAAE;MAC5BK,OAAO,EAAE;QAAEkB,aAAa,EAAE,UAAUD,KAAK;MAAG;IAC9C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,WAAWA,CAACH,KAAK,EAAEI,KAAK,EAAE;IAC9B,OAAO,IAAI,CAAC1B,OAAO,CAAC,QAAQ,EAAE;MAC5BkB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QAAEkB,aAAa,EAAE,UAAUD,KAAK;MAAG,CAAC;MAC7ChB,IAAI,EAAEoB;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,eAAeA,CAACL,KAAK,EAAEM,OAAO,EAAE;IACpC,OAAO,IAAI,CAAC5B,OAAO,CAAC,WAAW,EAAE;MAC/BkB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QAAEkB,aAAa,EAAE,UAAUD,KAAK;MAAG,CAAC;MAC7ChB,IAAI,EAAEsB;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,eAAeA,CAACP,KAAK,EAAE;IAC3B,OAAO,IAAI,CAACtB,OAAO,CAAC,WAAW,EAAE;MAC/BK,OAAO,EAAE;QAAEkB,aAAa,EAAE,UAAUD,KAAK;MAAG;IAC9C,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}