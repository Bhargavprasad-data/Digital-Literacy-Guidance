{"ast":null,"code":"// Simple validators for Indian mobile numbers and UPI IDs\n// Mobile: 10 digits, starts with 6-9. Allows spaces or dashes which will be stripped for validation\nexport function normalizeMobile(input) {\n  if (!input) return '';\n  return String(input).replace(/\\D/g, '');\n}\nexport function isValidIndianMobile(input) {\n  const digits = normalizeMobile(input);\n  return /^[6-9][0-9]{9}$/.test(digits);\n}\n\n// UPI ID: strict check name@handle against a curated list of handles\nconst UPI_HANDLES = [\n// Major apps and bank PSPs\n'ybl',\n// PhonePe (Yes Bank)\n'axl',\n// Google Pay (Axis)\n'ibl',\n// Google Pay (ICICI)\n'okaxis',\n// Google Pay (Axis handle)\n'okhdfcbank',\n// Google Pay (HDFC handle)\n'okicici',\n// Google Pay (ICICI handle)\n'oksbi',\n// Google Pay (SBI handle)\n'paytm',\n// Paytm Payments Bank\n'upi',\n// Generic UPI (BHIM)\n'icici', 'axisbank', 'idfcbank', 'idfc', 'hdfcbank', 'kotak', 'sbi', 'yesbank', 'rbl', 'fbl',\n// Federal Bank\n'aubank', 'airtel', 'barodampay' // Bank of Baroda\n];\nconst UPI_HANDLE_REGEX = new RegExp(`^(${UPI_HANDLES.join('|')})$`, 'i');\nexport function isValidUpiId(input) {\n  if (!input) return false;\n  const trimmed = String(input).trim();\n  const parts = trimmed.split('@');\n  if (parts.length !== 2) return false;\n  const [local, handle] = parts;\n  // local part: 2-50 allowed chars\n  if (!/^[a-zA-Z0-9._-]{2,50}$/.test(local)) return false;\n  return UPI_HANDLE_REGEX.test(handle);\n}\nexport function isValidMobileOrUpi(input) {\n  return isValidIndianMobile(input) || isValidUpiId(input);\n}\n\n// UPI PIN validation: allow only digits; most banks use 4 or 6 digits\nexport function isValidUpiPin(input) {\n  if (!input) return false;\n  const digits = String(input).replace(/\\D/g, '');\n  return /^(\\d{4}|\\d{6})$/.test(digits);\n}","map":{"version":3,"names":["normalizeMobile","input","String","replace","isValidIndianMobile","digits","test","UPI_HANDLES","UPI_HANDLE_REGEX","RegExp","join","isValidUpiId","trimmed","trim","parts","split","length","local","handle","isValidMobileOrUpi","isValidUpiPin"],"sources":["C:/Users/Bharg/OneDrive/Desktop/Digital literacy/frontend/src/services/validation.js"],"sourcesContent":["// Simple validators for Indian mobile numbers and UPI IDs\n// Mobile: 10 digits, starts with 6-9. Allows spaces or dashes which will be stripped for validation\nexport function normalizeMobile(input) {\n  if (!input) return '';\n  return String(input).replace(/\\D/g, '');\n}\n\nexport function isValidIndianMobile(input) {\n  const digits = normalizeMobile(input);\n  return /^[6-9][0-9]{9}$/.test(digits);\n}\n\n// UPI ID: strict check name@handle against a curated list of handles\nconst UPI_HANDLES = [\n  // Major apps and bank PSPs\n  'ybl',          // PhonePe (Yes Bank)\n  'axl',          // Google Pay (Axis)\n  'ibl',          // Google Pay (ICICI)\n  'okaxis',       // Google Pay (Axis handle)\n  'okhdfcbank',   // Google Pay (HDFC handle)\n  'okicici',      // Google Pay (ICICI handle)\n  'oksbi',        // Google Pay (SBI handle)\n  'paytm',        // Paytm Payments Bank\n  'upi',          // Generic UPI (BHIM)\n  'icici',\n  'axisbank',\n  'idfcbank',\n  'idfc',\n  'hdfcbank',\n  'kotak',\n  'sbi',\n  'yesbank',\n  'rbl',\n  'fbl',          // Federal Bank\n  'aubank',\n  'airtel',\n  'barodampay'    // Bank of Baroda\n];\n\nconst UPI_HANDLE_REGEX = new RegExp(`^(${UPI_HANDLES.join('|')})$`, 'i');\n\nexport function isValidUpiId(input) {\n  if (!input) return false;\n  const trimmed = String(input).trim();\n  const parts = trimmed.split('@');\n  if (parts.length !== 2) return false;\n  const [local, handle] = parts;\n  // local part: 2-50 allowed chars\n  if (!/^[a-zA-Z0-9._-]{2,50}$/.test(local)) return false;\n  return UPI_HANDLE_REGEX.test(handle);\n}\n\nexport function isValidMobileOrUpi(input) {\n  return isValidIndianMobile(input) || isValidUpiId(input);\n}\n\n// UPI PIN validation: allow only digits; most banks use 4 or 6 digits\nexport function isValidUpiPin(input) {\n  if (!input) return false;\n  const digits = String(input).replace(/\\D/g, '');\n  return /^(\\d{4}|\\d{6})$/.test(digits);\n}\n\n\n"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,KAAK,EAAE;EACrC,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EACrB,OAAOC,MAAM,CAACD,KAAK,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AACzC;AAEA,OAAO,SAASC,mBAAmBA,CAACH,KAAK,EAAE;EACzC,MAAMI,MAAM,GAAGL,eAAe,CAACC,KAAK,CAAC;EACrC,OAAO,iBAAiB,CAACK,IAAI,CAACD,MAAM,CAAC;AACvC;;AAEA;AACA,MAAME,WAAW,GAAG;AAClB;AACA,KAAK;AAAW;AAChB,KAAK;AAAW;AAChB,KAAK;AAAW;AAChB,QAAQ;AAAQ;AAChB,YAAY;AAAI;AAChB,SAAS;AAAO;AAChB,OAAO;AAAS;AAChB,OAAO;AAAS;AAChB,KAAK;AAAW;AAChB,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,EACN,UAAU,EACV,OAAO,EACP,KAAK,EACL,SAAS,EACT,KAAK,EACL,KAAK;AAAW;AAChB,QAAQ,EACR,QAAQ,EACR,YAAY,CAAI;AAAA,CACjB;AAED,MAAMC,gBAAgB,GAAG,IAAIC,MAAM,CAAC,KAAKF,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;AAExE,OAAO,SAASC,YAAYA,CAACV,KAAK,EAAE;EAClC,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EACxB,MAAMW,OAAO,GAAGV,MAAM,CAACD,KAAK,CAAC,CAACY,IAAI,CAAC,CAAC;EACpC,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC;EAChC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;EACpC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGJ,KAAK;EAC7B;EACA,IAAI,CAAC,wBAAwB,CAACR,IAAI,CAACW,KAAK,CAAC,EAAE,OAAO,KAAK;EACvD,OAAOT,gBAAgB,CAACF,IAAI,CAACY,MAAM,CAAC;AACtC;AAEA,OAAO,SAASC,kBAAkBA,CAAClB,KAAK,EAAE;EACxC,OAAOG,mBAAmB,CAACH,KAAK,CAAC,IAAIU,YAAY,CAACV,KAAK,CAAC;AAC1D;;AAEA;AACA,OAAO,SAASmB,aAAaA,CAACnB,KAAK,EAAE;EACnC,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EACxB,MAAMI,MAAM,GAAGH,MAAM,CAACD,KAAK,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC/C,OAAO,iBAAiB,CAACG,IAAI,CAACD,MAAM,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}